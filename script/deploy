#!/usr/bin/env node
const execa = require('execa');
const Ora = require('ora');
const got = require('gh-got');

const branch = process.env.TRAVIS_PULL_REQUEST_BRANCH || 'depoyments';

if (process.env.TRAVIS_PULL_REQUEST && branch) {
  const ghStatus = (status, id) => {
    const owner = 'stoe';
    const repo = 'arduino-sample';

    let cmd = `repos/${owner}/${repo}/deployments`;
    let body = {
      ref: branch,
      description: 'Deploying to Arduino...',
      auto_merge: false // eslint-disable-line camelcase
    };

    if (status && id) {
      cmd = `repos/${owner}/${repo}/deployments/${id}/statuses`;
      body = {
        state: status,
        description: 'Deploying to Arduino...',
        auto_inactive: true // eslint-disable-line camelcase
      };
    }

    return new Promise((resolve, reject) => {
      got(cmd, {
        token: process.env.GH_TOKEN,
        method: 'POST',
        body
      })
        .then(res => resolve(res.body.id))
        .catch(err => reject(err));
    });
  };

  const ora = new Ora({
    text: 'platformio remote upload'
  }).start();

  ghStatus()
    .then(id => {
      execa
        .shell(`platformio account login -u ${process.env.PIO_USERNAME} -p ${process.env.PIO_PASSWORD}`)
        .then(() => {
          execa
            .shell(`platformio remote --agent ${process.env.PIO_AGENT} run -e due -t upload -s`)
            .then(() => {
              ghStatus('success', id);
              ora.succeed();
            })
            .catch(err => {
              throw err;
            });
        })
        .catch(err => {
          ghStatus('error', id);
          ora.fail(err.stderr);
        });
    })
    .catch(err => {
      ora.fail(err.message);
    });
} else {
  console.log('not a PR.');
}
