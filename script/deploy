#!/usr/bin/env node
const execa = require('execa');
const Ora = require('ora');
const got = require('gh-got');

const owner = 'stoe';
const repo = 'arduino-sample';

const branch = process.env.TRAVIS_BRANCH;

if (branch) {
  const ghStatusCreate = () => {
    return new Promise((resolve, reject) => {
      got(`repos/${owner}/${repo}/deployments`, {
        token: process.env.GH_TOKEN,
        method: 'POST',
        body: {
          ref: branch,
          description: 'Deploying to Arduino...',
          auto_merge: false, // eslint-disable-line camelcase
          required_contexts: ['success'] // eslint-disable-line camelcase
        },
        accept: 'application/vnd.github.ant-man-preview+json'
      })
        .then(res => resolve(res.body.id))
        .catch(err => reject(err));
    });
  };

  const ghStatusUpdate = (status, id) => {
    return new Promise((resolve, reject) => {
      got(`repos/${owner}/${repo}/deployments/${id}/statuses`, {
        token: process.env.GH_TOKEN,
        method: 'POST',
        body: {
          state: status,
          description: 'Deploying to Arduino...',
          auto_inactive: true // eslint-disable-line camelcase
        },
        accept: 'application/vnd.github.ant-man-preview+json'
      })
        .then(res => resolve(res.body))
        .catch(err => reject(err));
    });
  };

  const ora = new Ora({
    text: 'platformio remote upload'
  }).start();

  ghStatusCreate()
    .then(id => {
      execa
        .shell(`platformio account login -u "${process.env.PIO_USERNAME}" -p "${process.env.PIO_PASSWORD}"`)
        .then(() => {
          execa.shell(`platformio remote -a "${process.env.PIO_AGENT}" run -e due -t upload -s`).then(() => {
            ghStatusUpdate('success', id);
            ora.succeed();
          });
        })
        .catch(err => {
          ghStatusUpdate('error', id);
          ora.fail(err.stderr);
        });
    })
    .catch(err => console.log(err));
} else {
  console.log('not running in Travic CI.');
}
